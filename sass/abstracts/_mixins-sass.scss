// Respond-to mixin
// ex. @include respond-to("medium-up") {...}

$bp-aliases: ('small' : (max-width: #{$small - 1}),
  'medium' : (max-width: #{$medium - 1}),
  'large' : (max-width: #{$large - 1}),
  'extra-large' : (max-width: #{$extra-large - 1}),
  'small-up' : (min-width: #{$small}),
  'medium-up' : (min-width: #{$medium}),
  'large-up' : (min-width: #{$large}),
  'extra-large-up' : (min-width: #{$extra-large}));

// Source : https://www.sitepoint.com/managing-responsive-breakpoints-sass/
@mixin respond-to($name) {

  // If the key exists in the map
  @if map-has-key($bp-aliases, $name) {

    // Prints a media query based on the value
    @media #{inspect(map-get($bp-aliases, $name))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
    +"Please make sure it is defined in `$breakpoints` map.";
  }
}

// Decoration for basic components: buttons, badges, alerts, etc.
// Convention is to use BEM classes like: btn--default, title--primary, etc.
$appearance: (
  default: (
    bg-color : inherit,
    txt-color : inherit,
    stroke : none,
    radius: 0,
    bg-hover: inherit
    ),
  primary: (
    bg-color : var(--color-state-primary),
    txt-color : var(--white),
    stroke : none,
    radius: 0,
    bg-hover: var(--color-state-primary-dark)
    ),
  success: (
    bg-color : var(--color-state-success),
    txt-color : var(--white),
    stroke : none,
    radius: 0,
    bg-hover: var(--color-state-success-dark)
    ),
  info: (
    bg-color : var(--color-state-info),
    txt-color : var(--color-text-primary),
    stroke : none,
    radius: 0,
    bg-hover: var(--color-state-info-dark)
    ),
  warning: (
    bg-color : var(--color-state-warning),
    txt-color : var(--color-text-primary),
    stroke : none,
    radius: 0,
    bg-hover: var(--color-state-warning-dark)
    ),
  danger: (
    bg-color : var(--color-state-danger),
    txt-color : var(--white),
    stroke : none,
    radius: 0,
    bg-hover: var(--color-state-danger-dark)
    ),
  muted: (
    bg-color : var(--color-state-muted),
    txt-color : var(--white),
    stroke : none,
    radius: 0,
    bg-hover: var(--color-state-muted-dark)
    ),
  ghost: (
    bg-color : var(--color-state-ghost),
    txt-color : var(--white),
    stroke : 0 0 0 1px var(--white) inset,
    radius: 0,
    bg-hover: var(--color-state-ghost)
    )
) !default;


// Mixin for appearance components
@mixin appearance($elem) {
  $q: map-get($appearance, $elem);
  background-color: map-get($q, "bg-color");
  color: map-get($q, "txt-color");
  box-shadow: map-get($q, "stroke");
  border-radius: map-get($q, "radius");

  &:hover,
  &:focus,
  &:active {
    background-color: map-get($q, "bg-hover");
  }
}

[class*="--default"] {
  @include appearance('default');
}

[class*="--primary"] {
  @include appearance('primary');
}

[class*="--success"] {
  @include appearance('success');
}

[class*="--info"] {
  @include appearance('info');
}

[class*="--warning"] {
  @include appearance('warning');
}

[class*="--danger"] {
  @include appearance('danger');
}

[class*="--muted"] {
  @include appearance('muted');
}

[class*="--ghost"] {
  @include appearance('ghost');
}